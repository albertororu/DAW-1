{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Temario de Entorno For full documentation visit mkdocs.org . Unidad 3 U3 About","title":"Home"},{"location":"#temario-de-entorno","text":"For full documentation visit mkdocs.org . Unidad 3 U3 About","title":"Temario de Entorno"},{"location":"Tema02/","text":"Instala el editor sublime text. Saca una captura de pantalla una vez instalado. Personaliza Sublime text instalando los complementos m\u00e1s importantes. Consulta la p\u00e1gina https://www.genbetadev.com/desarrollo-web/10-packages-de-sublimetext-para-desarrolladores-web \u00bfPara que sirve el complemento Emmet ? Haz uso de \u00e9l al escribir un archivo html de prueba. Es un complemento de complementos para editores de texto que permite que la parte mec\u00e1nica de la programaci\u00f3n, que es escribir los tags o palabras reservadas suponga mucho menos esfuerzo y tiempo . Instala el editor Visual Studio Code. Saca una captura de pantalla una vez instalado y funcionando. Haz una comparativa de la funcionalidad ofrecida por Sublime text y la ofrecida por Visual Studio Code referente a los siguientes aspectos: terminal integrado En el caso de Visual Studio Code el terminal ya viene integrado y con opci\u00f3n de b\u00fasqueda f\u00e1cil para poder abrirlo, es sencillo de utilizar y desde ahi podemos ejecutar un proyecto. Para Sublime text debemos instalarlo dentro de la aplicaci\u00f3n algo que puede ser m\u00e1s costoso, a la hora de utilizar tiene las caracter\u00edsticas parecidas. emmet incorporado Para Sublime text tenemos que descargarlo, pero a\u00fan as\u00ed es muy efectivo y r\u00e1pido ya que nos ahorra mucho la escritura. Para visual studio code viene instalado y es efectivo y nos proporciona muchas opciones para poder seleccionar. iconos para los tipos de archivos En visual studio code nos vienen iconos para los archivos cosa que nos puede facilitar el entendimiento y en este caso en sublime text no nos vienen. atajo de teclas para comentar (Ctrl+Shift+7) Para los dos muy sencillo y eficiente siendo practico para ir mas ligero. atajo de teclas para buscar y seleccionar (Ctrl+D) Para los dos muy sencillo y eficiente siendo practico para ir mas ligero. \u00bfQu\u00e9 paquetes b\u00e1sicos debemos instalar en Ubuntu para desarrollar en Java? Netbeans, Eclipse, Intellij Idea y Oracle JDeveloper Instala el entorno integrado Netbeans. Saca una captura de pantalla una vez instalado y funcionando. Instala el entorno integrado Eclipse. Saca una captura de pantalla una vez instalado y funcionando. Crea un proyecto en Java en Netbeans. Realiza su compilaci\u00f3n y ejecuci\u00f3n. \u00bfQu\u00e9 sistema de construcci\u00f3n utiliza Netbeans para generar los archivos \"ejecutables\"? Mira en el directorio ra\u00edz del proyecto y examina qu\u00e9 buildfile utiliza de los vistos en el tema. Netbeans utiliza el sistema de construcci\u00f3n Maven para generar los archivos, con un buildfile pom.xml Crea un proyecto en Java en Eclipse. Realiza su compilaci\u00f3n y ejecuci\u00f3n. \u00bfQu\u00e9 sistema de construcci\u00f3n utiliza Eclipse para generar los archivos \"ejecutables\"? Mira en el directorio ra\u00edz del proyecto y examina qu\u00e9 buildfile utiliza de los vistos en el tema. Eclipse utiliza el sistema de construcci\u00f3n Gradle para generar los archivos, con un buildfile build.gradle","title":"Tema02"},{"location":"Tema03/","text":"UNIDAD 3 CONTROL DE VERSIONES Los sistemas m\u00e1s conocidos dentro del control de versiones son: CVS Subversion Mercurial Git El mas conocido de los mencionados antes es Git, el cual posee unas caracteristicas como son: Es moderno Es distribuido Es eficiente Dentro de GIT tambi\u00e9n obtenemos unos conceptos que debemos aprender y tener en cuenta a la hora de su realizaci\u00f3n. Estos conceptos son varios y se pueden clasificar en: Repository (local y remote) Commit Branch [ ] Checkout [ ] Merge En GIT encontramos \u00e1reas diferentes que se pueden nombrar por: Working directory Staging area Repository Para poder movernos de uno a otro deberemos utilizar comandos dentro de GIT como pueden ser git add para desplazarnos del working directory al staging area o git commit para desplazarnos de staging area a repository. Aqui encontramos un ejemplo de las \u00e1reas Dentro de GIT nos podemos encontrar tambien con las ramas que son lineas de tiempo en nuestro proyecto que nos sirven para aareglar errores, experimentar, hacer grandes cambios, etc. Aqui mostramos un ejemplo de ramas Para terminar con este tema nombraremos aquellos sitios que soportan GIT GitHub Bitbucket GitLab Coding -en chino- Actividades Tema 1.Adem\u00e1s de Git, \u00bfque otros sistemas de control de versiones existen? Existen otros sistemas como son CVS, Subversion y Mercurial 2.En Git, \u00bfqu\u00e9 tres \u00e1reas existen? Existen el working directory, el staging area y el repository 4.Busca en Internet un buen tutorial de GIT y real\u00edzalo. \u00bfDe qu\u00e9 tutorial se trata? https://www.atlassian.com/es/git Este es el tutorial de GIT que he encontrado donde podemos ver teoria escrita y videos. Nos viene todo explicado por partes y explicando cada configuracion de GIT. 5.En Git, \u00bfpara qu\u00e9 sirve el comando git config ? El comando git config sirve para definir valores de configuraci\u00f3n a nivel de un proyecto 6.En Git, \u00bfpara qu\u00e9 sirve el comando git init ? El comando git init sirve para crear un nuevo repositorio 7.En Git, \u00bfpara qu\u00e9 sirve el comando git clone ? El comando git clone se utiliza para apuntar a un repositorio existente y clonar o copiar dicho repositorio en un nuevo directorio en otra ubicaci\u00f3n. 8.En Git, \u00bfpara qu\u00e9 sirve el comando git status ? El comando git status muestra el estado del directorio de trabajo y del \u00e1rea del entorno de ensayo 9.En Git, \u00bfpara qu\u00e9 sirve el comando git add? El comando git add a\u00f1ade un cambio del directorio de trabajo en el entorno de ensayo. 10.En Git, \u00bfpara qu\u00e9 sirve el comando git commit? El comando git commit sirve para confirmar una instant\u00e1nea del directorio del entorno de ensayo en el historial de confirmaciones de los repositorios. 11.En Git, \u00bfpara qu\u00e9 sirve el comando git log? El comando git log es una herramienta utlizada para explorar el historial del repositorio 12.En Git, \u00bfpara qu\u00e9 sirve el comando git reset HEAD nombrearchivo? El comando git reset HEAD sirve para restablecer el HEAD actual en un estado especifico 13.En Git, \u00bfpara qu\u00e9 sirve el comando git checkout -- nombrearchivo? El comando git checkout te permite desplazarte entre las ramas creadas por git branch 15.En Git, \u00bfpara qu\u00e9 sirve el comando git branch ? El comando git branch nos permite crear, enumerar y eliminar ramas, as\u00ed como cambiar su nombre. 16.En Git, \u00bfpara qu\u00e9 sirve el comando git checkout ? El comando git checkout nos permite desplazarnos entre las ramas creadas por git branch . 17.En Git, \u00bfpara qu\u00e9 sirve el comando git merge ? El comando git merge nos permite tomar las l\u00edneas independientes de desarrollo creadas por git branch e integrarlas en una sola rama. 18.En Git, explica c\u00f3mo funciona la fusi\u00f3n (merge) de tipo fast-forward. Fast Forward en Git Merge puede definirse como una opci\u00f3n de gran utilidad y eficiencia para acelerar el flujo de trabajo en el proceso del proyecto. Esto lo consigue mediante la armonizaci\u00f3n de la rama principal del proyecto, con las modificaciones resultantes de la creaci\u00f3n de una rama feature con determinadas especificaciones de cambios. Esta opci\u00f3n tambi\u00e9n se conoce como avance r\u00e1pido o por sus siglas, FF (Fast Forward) en Git Merge, y destaca por su capacidad de cambiar el *HEAD* en el sistema. 19.En Git, explica c\u00f3mo funciona la fusi\u00f3n (merge) de tipo 3-way. Cuando no hay un proceso lineal hacia la rama de destino, Git no tiene m\u00e1s opci\u00f3n que combinarlas mediante una fusi\u00f3n de 3 v\u00edas. Las fusiones de 3 v\u00edas utilizan una confirmaci\u00f3n espec\u00edfica para unir dos historiales.","title":"Tema 3"},{"location":"Tema03/#unidad-3","text":"","title":"UNIDAD 3"},{"location":"Tema03/#control-de-versiones","text":"Los sistemas m\u00e1s conocidos dentro del control de versiones son: CVS Subversion Mercurial Git El mas conocido de los mencionados antes es Git, el cual posee unas caracteristicas como son: Es moderno Es distribuido Es eficiente Dentro de GIT tambi\u00e9n obtenemos unos conceptos que debemos aprender y tener en cuenta a la hora de su realizaci\u00f3n. Estos conceptos son varios y se pueden clasificar en: Repository (local y remote) Commit Branch [ ] Checkout [ ] Merge En GIT encontramos \u00e1reas diferentes que se pueden nombrar por: Working directory Staging area Repository Para poder movernos de uno a otro deberemos utilizar comandos dentro de GIT como pueden ser git add para desplazarnos del working directory al staging area o git commit para desplazarnos de staging area a repository. Aqui encontramos un ejemplo de las \u00e1reas Dentro de GIT nos podemos encontrar tambien con las ramas que son lineas de tiempo en nuestro proyecto que nos sirven para aareglar errores, experimentar, hacer grandes cambios, etc. Aqui mostramos un ejemplo de ramas Para terminar con este tema nombraremos aquellos sitios que soportan GIT GitHub Bitbucket GitLab Coding -en chino-","title":"CONTROL DE VERSIONES"},{"location":"Tema03/#actividades-tema","text":"1.Adem\u00e1s de Git, \u00bfque otros sistemas de control de versiones existen? Existen otros sistemas como son CVS, Subversion y Mercurial 2.En Git, \u00bfqu\u00e9 tres \u00e1reas existen? Existen el working directory, el staging area y el repository 4.Busca en Internet un buen tutorial de GIT y real\u00edzalo. \u00bfDe qu\u00e9 tutorial se trata? https://www.atlassian.com/es/git Este es el tutorial de GIT que he encontrado donde podemos ver teoria escrita y videos. Nos viene todo explicado por partes y explicando cada configuracion de GIT. 5.En Git, \u00bfpara qu\u00e9 sirve el comando git config ? El comando git config sirve para definir valores de configuraci\u00f3n a nivel de un proyecto 6.En Git, \u00bfpara qu\u00e9 sirve el comando git init ? El comando git init sirve para crear un nuevo repositorio 7.En Git, \u00bfpara qu\u00e9 sirve el comando git clone ? El comando git clone se utiliza para apuntar a un repositorio existente y clonar o copiar dicho repositorio en un nuevo directorio en otra ubicaci\u00f3n. 8.En Git, \u00bfpara qu\u00e9 sirve el comando git status ? El comando git status muestra el estado del directorio de trabajo y del \u00e1rea del entorno de ensayo 9.En Git, \u00bfpara qu\u00e9 sirve el comando git add? El comando git add a\u00f1ade un cambio del directorio de trabajo en el entorno de ensayo. 10.En Git, \u00bfpara qu\u00e9 sirve el comando git commit? El comando git commit sirve para confirmar una instant\u00e1nea del directorio del entorno de ensayo en el historial de confirmaciones de los repositorios. 11.En Git, \u00bfpara qu\u00e9 sirve el comando git log? El comando git log es una herramienta utlizada para explorar el historial del repositorio 12.En Git, \u00bfpara qu\u00e9 sirve el comando git reset HEAD nombrearchivo? El comando git reset HEAD sirve para restablecer el HEAD actual en un estado especifico 13.En Git, \u00bfpara qu\u00e9 sirve el comando git checkout -- nombrearchivo? El comando git checkout te permite desplazarte entre las ramas creadas por git branch 15.En Git, \u00bfpara qu\u00e9 sirve el comando git branch ? El comando git branch nos permite crear, enumerar y eliminar ramas, as\u00ed como cambiar su nombre. 16.En Git, \u00bfpara qu\u00e9 sirve el comando git checkout ? El comando git checkout nos permite desplazarnos entre las ramas creadas por git branch . 17.En Git, \u00bfpara qu\u00e9 sirve el comando git merge ? El comando git merge nos permite tomar las l\u00edneas independientes de desarrollo creadas por git branch e integrarlas en una sola rama. 18.En Git, explica c\u00f3mo funciona la fusi\u00f3n (merge) de tipo fast-forward. Fast Forward en Git Merge puede definirse como una opci\u00f3n de gran utilidad y eficiencia para acelerar el flujo de trabajo en el proceso del proyecto. Esto lo consigue mediante la armonizaci\u00f3n de la rama principal del proyecto, con las modificaciones resultantes de la creaci\u00f3n de una rama feature con determinadas especificaciones de cambios. Esta opci\u00f3n tambi\u00e9n se conoce como avance r\u00e1pido o por sus siglas, FF (Fast Forward) en Git Merge, y destaca por su capacidad de cambiar el *HEAD* en el sistema. 19.En Git, explica c\u00f3mo funciona la fusi\u00f3n (merge) de tipo 3-way. Cuando no hay un proceso lineal hacia la rama de destino, Git no tiene m\u00e1s opci\u00f3n que combinarlas mediante una fusi\u00f3n de 3 v\u00edas. Las fusiones de 3 v\u00edas utilizan una confirmaci\u00f3n espec\u00edfica para unir dos historiales.","title":"Actividades Tema"},{"location":"about/","text":"By Alberto Romero","title":"About"}]}